{
    "_Description": "When changing any of the listed settings, copy the relevant parts into `BATTLETECH/Mods/ModTek/config.json`.",
    "ShowLoadingScreenErrors_Description": "TODO",
    "ShowLoadingScreenErrors": true,
    "ShowErrorPopup_Description": "TODO",
    "ShowErrorPopup": true,
    "UseErrorWhiteList_Description": "TODO",
    "UseErrorWhiteList": true,
    "ErrorWhitelist": [
        "Data.DataManager [ERROR] ManifestEntry is null"
    ],
    "SearchModsInSubDirectories_Description": "Searches recursively all directories for mod.json instead only for directories directly found under Mods. Set to false for pre v2.0 behavior.",
    "SearchModsInSubDirectories": true,
    "ImplicitManifestShouldMergeJSON_Description": "How JSONs in a mods implicit manifest (StreamingAssets) are being treated.",
    "ImplicitManifestShouldMergeJSON": true,
    "ImplicitManifestShouldAppendText_Description": "How CSVs in a mods implicit manifest (StreamingAssets) are being treated.",
    "ImplicitManifestShouldAppendText": false,
    "ReplaceResetsMerges_Description": "If enabled, once a manifest entry gets replaced, all previously queued merges will not apply.",
    "ReplaceResetsMerges": true,
    "NormalizeCsvIfAppending_Description": "Normalize CSV files when merging/appending. Filters out empty lines and adds newlines where appropiate. Duplicate title detection and removal from appending files.",
    "NormalizeCsvIfAppending": true,
    "DataManagerUnfreezeDelta_Description": "How often to refresh the UI during loading. Does this by skipping loads every specified amount of seconds.",
    "DataManagerUnfreezeDelta": 2.0,
    "DataManagerEverSpinnyDetectionTimespan_Description": "How long data is not being further processed until it is assumed to be stuck for good. Upon detection it dumps lots of data into the log, but nothing more.",
    "DataManagerEverSpinnyDetectionTimespan": 30.0,
    "DelayPrewarmToMainMenu_Description": "Delays executing prewarm requests until entering the main menu and dlc packs are loaded. Prevents choppy intro video and makes sure to include dlc items during prewarm.",
    "DelayPrewarmToMainMenu": true,
    "ShowDataManagerStatsInLoadingCurtain_Description": "Adds DataManager stats when showing a loading curtain.",
    "ShowDataManagerStatsInLoadingCurtain": true,
    "BlockedMods_Description": "Mods that should not be allowed to load. Useful in cases where those mods would (newly) interfere with ModTek.",
    "BlockedMods": [
        "FYLS"
    ],
    "IgnoreMissingMods_Description": "Ignore the dependency requirement of mods that depend on the listed mods. Useful if e.g. ModTek provides the same functionality as the ignored mods.",
    "IgnoreMissingMods": [
        "FYLS"
    ],
    "MinimalLastConfig_Description": "Hides all null and _Description fields from the generated `last` config file.",
    "MinimalLastConfig": true,
    "Logging": {
        "LogUncaughtExceptions_Description": "Logs uncaught exceptions via AppDomain handler.",
        "LogUncaughtExceptions": true,
        "LogExceptionInitializations_Description": "Logs out any exceptions being initialized, even before they are thrown or ignored.",
        "LogExceptionInitializations": false,
        "LogSqlQueryInitializations_Description": "Logs out any sql queries being initialized, even before they are executed or ignored.",
        "LogSqlQueryInitializations": false,
        "LogThreadStarts_Description": "Logs who starts threads.",
        "LogThreadStarts": true,
        "LogStackTraces_Description": "Logs environment stack traces for every log statement, produces large amount of text.",
        "LogStackTraces": false,
        "LogStackTracesOnExceptions_Description": "Logs environment stack traces in addition to exception stack traces.",
        "LogStackTracesOnExceptions": true,
        "OverrideLoggerLevels_Description": "Overrides the log levels for the given loggers.",
        "OverrideLoggerLevels": {
            "UnityLoggerName": "Debug",
            "Debugger": "Debug",
            "AppDomain": "Debug",
            "ModTek": 200
        },
        "IgnoreLoggerLogLevel_Description": "Each logger has a log level, and when logging below that level it won't be logged. That behavior can be ignored to a certain extend. Set to true for FYLS behavior, not recommended though.",
        "IgnoreLoggerLogLevel": false,
        "DebugLogLevelSetters_Description": "Log who changed a log level changed.",
        "DebugLogLevelSetters": false,
        "SkipOriginalLoggers_Description": "If true, the original (HBS based) loggers and therefore their appenders and log files will be skipped.",
        "SkipOriginalLoggers": true,
        "IgnoreSkipForLoggers_Description": "Loggers defined here will never be skipped, meaning their log files will still be separately available.",
        "IgnoreSkipForLoggers": [],
        "UnityConsoleAppenderEnabled_Description": "Append HBS log statements to the unity console. Disabled by default as it reduces performance.",
        "UnityConsoleAppenderEnabled": false,
        "UnityConsoleAppender_Description": "Settings for the unity console appender.",
        "UnityConsoleAppender": {
            "LogRotationCount_Description": "How many log file to backups between application starts.",
            "LogRotationCount": 1,
            "Includes_Description": "If set, matching log statements matching are written to the log. Exclusion has precedence over inclusion.",
            "Includes": null,
            "Excludes_Description": "If set, matching log statements are ignored. Exclusion has precedence over inclusion.",
            "Excludes": null,
            "PrefixesToIgnore_Description": "Ignore any lines starting with any of the listed prefixes, internally will be converted to Excludes.",
            "PrefixesToIgnore": null,
            "IndentNewLines_Description": "If a log message with newlines inside is being logged, prefix every line with a tab character.",
            "IndentNewLines": true,
            "NormalizeNewLines_Description": "Makes sure all newline characters ([\\r\\n]) are converted to the OS preferred newline style.",
            "NormalizeNewLines": true,
            "MessageSanitizerRegex_Description": "The characters to remove from the log message before writing to the disk.",
            "MessageSanitizerRegex": "[\\p{C}-[\\r\\n\\t]]+",
            "AbsoluteTimeEnabled_Description": "Adds the clock time.",
            "AbsoluteTimeEnabled": false,
            "AbsoluteTimeUseUtc_Description": "Use UTC instead of local time.",
            "AbsoluteTimeUseUtc": true,
            "AbsoluteFormat_Description": "Runs through `DateTimeOffset.ToString`.",
            "AbsoluteFormat": "HH:mm:ss.fffffff",
            "StartupTimeEnabled_Description": "Adds the time since startup.",
            "StartupTimeEnabled": false,
            "StartupTimeFormat_Description": "Runs through `TimeSpan.ToString`.",
            "StartupTimeFormat": "hh':'mm':'ss'.'fffffff"
        },
        "AsynchronousLoggingEnabled_Description": "Uses another thread to format and log messages off the main thread.",
        "AsynchronousLoggingEnabled": true,
        "MainLog_Description": "The main log.",
        "MainLog": {
            "LogRotationCount_Description": "How many log file to backups between application starts.",
            "LogRotationCount": 1,
            "Includes_Description": "If set, matching log statements matching are written to the log. Exclusion has precedence over inclusion.",
            "Includes": null,
            "Excludes_Description": "If set, matching log statements are ignored. Exclusion has precedence over inclusion.",
            "Excludes": null,
            "PrefixesToIgnore_Description": "Ignore any lines starting with any of the listed prefixes, internally will be converted to Excludes.",
            "PrefixesToIgnore": null,
            "IndentNewLines_Description": "If a log message with newlines inside is being logged, prefix every line with a tab character.",
            "IndentNewLines": true,
            "NormalizeNewLines_Description": "Makes sure all newline characters ([\\r\\n]) are converted to the OS preferred newline style.",
            "NormalizeNewLines": true,
            "MessageSanitizerRegex_Description": "The characters to remove from the log message before writing to the disk.",
            "MessageSanitizerRegex": "[\\p{C}-[\\r\\n\\t]]+",
            "AbsoluteTimeEnabled_Description": "Adds the clock time.",
            "AbsoluteTimeEnabled": true,
            "AbsoluteTimeUseUtc_Description": "Use UTC instead of local time.",
            "AbsoluteTimeUseUtc": true,
            "AbsoluteFormat_Description": "Runs through `DateTimeOffset.ToString`.",
            "AbsoluteFormat": "HH:mm:ss.fffffff",
            "StartupTimeEnabled_Description": "Adds the time since startup.",
            "StartupTimeEnabled": false,
            "StartupTimeFormat_Description": "Runs through `TimeSpan.ToString`.",
            "StartupTimeFormat": "hh':'mm':'ss'.'fffffff"
        },
        "MainLogFilePath": "battletech_log.txt",
        "Logs_Description": "Allows to define logs, the `key` specifies the log file path relative to `.modtek`.",
        "Logs": {
            "ModTek.log": {
                "LogRotationCount_Description": "How many log file to backups between application starts.",
                "LogRotationCount": 1,
                "Includes_Description": "If set, matching log statements matching are written to the log. Exclusion has precedence over inclusion.",
                "Includes": [
                    {
                        "_Description": "The filter matches if all subfiles accept the message.",
                        "LogLevels_Description": "If set, this subfilter rejects the message if no value matches.",
                        "LogLevels": null,
                        "LoggerNames_Description": "If set, this subfilter rejects the message if no value matches.",
                        "LoggerNames": [
                            "ModTek"
                        ],
                        "MessagePrefixes_Description": "If set, this subfilter rejects the message if no value matches.",
                        "MessagePrefixes": null
                    }
                ],
                "Excludes_Description": "If set, matching log statements are ignored. Exclusion has precedence over inclusion.",
                "Excludes": null,
                "PrefixesToIgnore_Description": "Ignore any lines starting with any of the listed prefixes, internally will be converted to Excludes.",
                "PrefixesToIgnore": null,
                "IndentNewLines_Description": "If a log message with newlines inside is being logged, prefix every line with a tab character.",
                "IndentNewLines": true,
                "NormalizeNewLines_Description": "Makes sure all newline characters ([\\r\\n]) are converted to the OS preferred newline style.",
                "NormalizeNewLines": true,
                "MessageSanitizerRegex_Description": "The characters to remove from the log message before writing to the disk.",
                "MessageSanitizerRegex": "[\\p{C}-[\\r\\n\\t]]+",
                "AbsoluteTimeEnabled_Description": "Adds the clock time.",
                "AbsoluteTimeEnabled": true,
                "AbsoluteTimeUseUtc_Description": "Use UTC instead of local time.",
                "AbsoluteTimeUseUtc": true,
                "AbsoluteFormat_Description": "Runs through `DateTimeOffset.ToString`.",
                "AbsoluteFormat": "HH:mm:ss.fffffff",
                "StartupTimeEnabled_Description": "Adds the time since startup.",
                "StartupTimeEnabled": false,
                "StartupTimeFormat_Description": "Runs through `TimeSpan.ToString`.",
                "StartupTimeFormat": "hh':'mm':'ss'.'fffffff"
            }
        }
    }
}